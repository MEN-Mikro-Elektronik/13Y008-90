/***************************************************************************
 */
/*!       \file  wizexcept.h
 *       \brief  base exception classes and general mdiswiz macros
 *      \author	 Klaus.Popp@men.de
 *		  $Date: 2010/01/22 11:28:21 $
 *    $Revision: 2.0 $
 *
 *     Switches: -
 */
/*-------------------------------[ History ]---------------------------------
 *
 * $Log: wizexcept.h,v $
 * Revision 2.0  2010/01/22 11:28:21  dpfeuffer
 * R: copyright wrong
 * M: copyright fixed
 *
 * Revision 1.1  2003/05/02 14:36:40  dschmidt
 * Initial Revision
 *
 *---------------------------------------------------------------------------
 * (c) Copyright 2003-2010 by MEN Mikro Elektronik GmbH, Nuremberg, Germany
 ****************************************************************************/
#ifndef WIZEXCEPT_H
#define WIZEXCEPT_H

#include <qstring.h>
// -----------------------------------------------------------------
// WizExcept

//! base class for all exceptions generated by mdiswiz
class WizExcept {
public:
	//! return the exception message
	QString &getMsg() { return msg; }
protected:
	QString msg;	//!< holds the exception message
};

//! exception for bad dynamic casts (#WIZ_DYNAMIC_CAST)
class WizExceptBadClass : public WizExcept {
public:
	//! creates WizExceptBadClass
	/*!
	  \param file file name
	  \param line line within \a file
	  \param type expected type
	*/
	WizExceptBadClass( const char *file, int line, const char *type ){
		msg.sprintf("Casting error: In file %s, line %d: "
					"Class is not of type %s",
					file, line, type );
	}
};

//! exceptions for assertions (#WIZ_ASSERT)
class WizExceptAssert : public WizExcept {
public:
	//! creates WizExceptAssert
	/*!
	  \param file file name
	  \param line line within \a file
	  \param expr expression that failed
	*/
	WizExceptAssert( const char *file, int line, const char *expr ){
		msg.sprintf("Assertion failed: In file %s, line %d: %s",
					file, line, expr );
	}
};

//! do dynamic cast, throw exception if bad cast
/*!
  same as \c dynamic_cast but throws WizExceptBadClass if class 
  is not of expected type

  \param src source object
  \param dst destination object
  \param type type to cast \a src
*/
#define WIZ_DYNAMIC_CAST(src,dst,type) \
 dst = dynamic_cast<type>(src); \
 if( dst == 0 ) \
     throw WizExceptBadClass( __FILE__, __LINE__, #type );

//! check if \a expr is true, throw WizExceptAssert if not
#define WIZ_ASSERT( expr ) \
 if( !(expr)) \
     throw WizExceptAssert( __FILE__, __LINE__, #expr );
 
#endif
