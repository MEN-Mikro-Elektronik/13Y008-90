/***************************************************************************
 */
/*!       \file  namemng.h
 *       \brief  device name manager
 *      \author	 Klaus.Popp@men.de
 *		  $Date: 2010/01/22 11:26:46 $
 *    $Revision: 2.0 $
 *
 *     Switches: -
 */
/*-------------------------------[ History ]---------------------------------
 *
 * $Log: namemng.h,v $
 * Revision 2.0  2010/01/22 11:26:46  dpfeuffer
 * R: Qt 3.3.1 doesn't support 64-bit build
 *    required for Windows MDIS_CLINST DLL.
 * M: MDIS Wizard ported to Qt 4.6
 *
 * Revision 1.2  2004/06/08 17:25:40  kp
 * Initial Release for Linux 1.0.010-linux1
 *
 * Revision 1.1  2003/05/02 14:36:11  dschmidt
 * Initial Revision
 *
 *---------------------------------------------------------------------------
 * (c) Copyright 2003-2010 by MEN Mikro Elektronik GmbH, Nuremberg, Germany
 ****************************************************************************/

#ifndef NAMEMNG_H
#define NAMEMNG_H

//----------------------------------------------------------------------
// (device) name management

#include <qlist.h>
#include <qstring.h>

#include <Q3PtrList>

#include "wizexcept.h"

//! Holds attributes of one entry of NameMng
class NameMngEntry {
public:
	//! creates a name manager entry
	/*!
	  \param _name device name
	  \param _caller pointer to caller's class
	*/
	NameMngEntry( const QString &_name, void *_caller ){
		name = _name;
		caller = _caller;
	}
	QString name;	//!< device name
	void *caller;	//!< pointer to caller's class
};

//----------------------------------------------------------------------
//! device name manager
/*!
  This class is used to keep track of the used device names within
  a Configuration. When a device wishes to use a device name it must
  request it by calling alloc(). When the device is deleted it must
  call free() or freeAllOfOwner().

  The name manager may also suggest device name; the device may use 
  suggest() to let the name manager suggest a device name.

  Names are not case sensitive. They are always converted lowercase.
*/
class NameMng {
public:
	//! base class for exceptions generated by NameMng
	class Except : public WizExcept {
	public:
	};

	//! exception that is generated when attempting to free an unallocated name
	class NotAllocated : public Except {
	public:
		//! creates NameMng::NotAllocated exception
		NotAllocated( const QString &mngName, const QString &name ) {
			msg.sprintf("Name Manager %s Free exception: "
						"%s not allocated",
						(const char *)mngName.data(), (const char *)name.data() );
		}
	};

	//! exception generated when a name is free'ed that is not owned  by caller
	class NotOwner : public Except {
	public:
		//! creates NameMng::NotOwner exception
		NotOwner( const QString &mngName, const QString &name ) {
			msg.sprintf("Name Manager %s Free exception: "
						"%s not owned",
						(const char *)mngName.data(), (const char *)name.data() );
		}
	};

		
	NameMng( const QString &_mngName );
	bool alloc( const QString &name, void *caller );
	void free( const QString &name, void *caller );
	void freeAllOfOwner( void *caller );
	bool isAvail( const QString &name );
	QString suggest( const QString &baseName );
	void dump();
private:
	QString mngName;				
	Q3PtrList<NameMngEntry> lstNames;	
};


#endif





